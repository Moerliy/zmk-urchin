/*
 * Copyright (c) 2023 Moritz Gleissner
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// Layer definitions
#define BASE 0
#define MOD 1
#define SYM 2
#define NUMB 3
#define SETTINGS 4
// -----------------

&sk {
	// don't release mods on other mods presses
	ignore-modifiers;
};


/ {
	behaviors {
		// Enables holding the first mod-tap key
		// by performing a tap-release-hold sequence.
		// To use it: "&qt KEYCODE1 KEYCODE2"
		qt: quick_tap {
			compatible = "zmk,behavior-hold-tap";
			label = "QUICK_TAP";
			#binding-cells = <2>;
			flavor = "hold-preferred";
			tapping-term-ms = <200>;
			quick-tap-ms = <200>;
			bindings = <&kp>, <&kp>;
		};
	};

	macros {
		// sometimes my device thinks a modifier is being held down
		// pressing all modifiers fixes it.
		unstick: unstick {
			label = "ZM_unstick";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp LSHIFT &kp RSHIFT &kp LCTRL &kp RCTRL &kp LALT &kp RALT &kp LGUI &kp RGUI>;
		};
	};

	combos {
		compatible = "zmk,combos";
		// both left thumb keys
		combo_settings {
			timeout-ms = <200>;
			key-positions = <30 31>;
			bindings = <&mo SETTINGS>;
		};
	};

	keymap {
		compatible = "zmk,keymap";
		// Base alpha layer
		default_layer {
			label = "Base";
			bindings = <
			&kp Y &kp C &kp L &kp M &kp K                           &kp Z &kp F &kp U            &kp COMMA &kp BSPC
			&kp I &kp S &kp R &kp T &kp G                           &kp P &kp N &kp E            &kp A     &kp O
			&kp Q &kp V &kp W &kp D &kp J                           &kp B &kp H &kp SINGLE_QUOTE &kp DOT   &kp X
							        &kp SPACE &sk LSHIFT    &mo MOD &to SYM
			>;
		};

		// High frequency symbols
		sym_layer {
			label = "Sym.";
			bindings = <
			&kp ESCAPE &none     &kp KP_MULTIPLY &kp CARET    &none		                            &kp AMPERSAND    &kp AT_SIGN          &kp HASH              &kp PERCENT       &kp BSPC
			&kp TAB    &kp MINUS &kp PLUS        &kp EQUAL    &kp GRAVE                             &kp PIPE         &kp LEFT_BRACE       &kp RIGHT_BRACE       &kp SLASH         &kp RET
			&to NUMB   &none     &kp EXCLAMATION &kp QUESTION &kp DOUBLE_QUOTES 	                &kp LEFT_BRACKET &kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp RIGHT_BRACKET &none
													 	      &kp SPACE  &sk LSHIFT         &mo MOD &to BASE
			>;
		};

	    // Everything numbers
		fnc_layer {
			label = "Numb.";
			bindings = <
			&kp ESCAPE &kp COMMA  &kp KP_MULTIPLY &kp CARET &none                               &none  &kp N7 &kp N8 &kp N9 &kp BSPC
			&kp TAB    &kp MINUS  &kp PLUS        &kp EQUAL &none                               &none  &kp N4 &kp N5 &kp N6 &kp RET
			&none      &kp PERIOD &none           &none     &none				                &kp N0 &kp N1 &kp N2 &kp N3 &none
							                               &kp SPACE  &sk LSHIFT              &mo MOD &to BASE
			>;
		};

        // Main modifiers, arrow keys and important symbols
		mod_layer {
			label = "Mods";
			bindings = <
			&kp ESCAPE &kp BACKSLASH &kp UP   &kp DOLLAR &kp TILDE		                         &none &none    &kp SEMICOLON  &kp COLON   &kp BSPC
			&kp TAB    &kp LEFT      &kp DOWN &kp RIGHT  &kp MINUS                               &none &none    &none          &none       &kp RET
			&none      &sk LCTRL     &sk LALT &sk LGUI   &none 	                                 &none &sk RGUI &sk RALT       &sk RCTRL   &none
									                     &kp SPACE  &sk LSHIFT            &trans &none
			>;
		};


		// Used to change the keyboard's settings.
		settings_layer {
				label = "Sett.";
				bindings = <
				&bootloader &none &none &bt BT_CLR &bt BT_SEL 0                                 &bt BT_SEL 3 &none &unstick &none &bootloader
				&none       &none &none &none      &bt BT_SEL 1 						        &bt BT_SEL 4 &none &none &none &none
				&none       &none &none &none      &bt BT_SEL 2                                 &bt BT_SEL 5 &none &none &none &none
				                						&none &none                         &none &none
				>;
		};
	};
};
